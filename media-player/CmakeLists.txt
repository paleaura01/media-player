cmake_minimum_required(VERSION 3.10)
project(media_player)

# Force the project to build as a console application.
set(CMAKE_WIN32_EXECUTABLE OFF)
set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SUBSYSTEM:CONSOLE")

# Set the C++ standard and enforce no extensions.
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# Set warning and optimization flags.
if(MSVC)
    add_compile_options(/W4 /O2)
else()
    add_compile_options(-Wall -Wextra -O2)
endif()

# --- vcpkg integration ---
# Configure with:
#   cmake .. -DCMAKE_TOOLCHAIN_FILE="../vcpkg/scripts/buildsystems/vcpkg.cmake" -A x64
find_package(SDL2 CONFIG REQUIRED)
find_package(SDL2_ttf CONFIG REQUIRED)
find_package(SDL2_mixer CONFIG REQUIRED)

# Optionally find FFmpeg libraries.
find_library(AVFORMAT_LIB avformat)
find_library(AVCODEC_LIB avcodec)
find_library(AVUTIL_LIB avutil)
find_library(SWSCALE_LIB swscale)
find_library(SWRESAMPLE_LIB swresample)

if(NOT AVFORMAT_LIB)
    message(WARNING "FFmpeg avformat library not found; ensure FFmpeg is installed if needed.")
endif()

# Create the executable target.
add_executable(media_player 
    src/main.cpp
    src/player.cpp 
    src/player.h
    src/bluetooth_server.cpp
    src/bluetooth_server.h
    src/protocol.cpp
    src/protocol.h
    src/state_manager.cpp
    src/state_manager.h
)

# Link the required libraries.
target_link_libraries(media_player PRIVATE 
    SDL2::SDL2 
    SDL2_ttf::SDL2_ttf 
    SDL2_mixer::SDL2_mixer 
    ${AVFORMAT_LIB} 
    ${AVCODEC_LIB} 
    ${AVUTIL_LIB} 
    ${SWSCALE_LIB} 
    ${SWRESAMPLE_LIB}
)

if(UNIX)
    set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
    set(CMAKE_INSTALL_RPATH "$ORIGIN/lib")
endif()

install(TARGETS media_player RUNTIME DESTINATION .)
